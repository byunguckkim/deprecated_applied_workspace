#!/usr/bin/env python

# Applied Intuition changes:
# * In Main(), python is launched with '-S'
#     Makes Python skip importing the site module, which pulls in dependencies
#     from the system. We do this for par's already, and now for (some?)
#     py_binary/py_tests.
# * In Main(), only non-duplicate paths from old_python_path are added to PYTHONPATH
#     Ensures that the PYTHONPATH doesn't grow to be too long when there is a chain of
#     calls across multiple py_binary targets (leads to an "Argument List Too Long" error).
#     Even with this change, it is still possible to run into this error if the chain of
#     py_binary targets itself is long enough.
# * In FindPythonBinary(), an operating system flag is used to return the absolute path
#     of the executable binary for the Python interpreter for use case on Windows OS.

from __future__ import print_function

import os
import re
import tempfile
import shutil
import sys
import subprocess
import zipfile

# Return True if running on Windows
def IsWindows():
  return os.name == 'nt'

def GetWindowsPathWithUNCPrefix(path):
  """
  Adding UNC prefix after getting a normalized absolute Windows path,
  it's no-op for non-Windows platforms or if running under python2.
  """
  path = path.strip()

  # No need to add prefix for non-Windows platforms.
  # And \\?\ doesn't work in python 2
  if not IsWindows() or sys.version_info[0] < 3:
    return path

  # Lets start the unicode fun
  unicode_prefix = "\\\\?\\"
  if path.startswith(unicode_prefix):
    return path

  # os.path.abspath returns a normalized absolute path
  return unicode_prefix + os.path.abspath(path)

def HasWindowsExecutableExtension(path):
  return path.endswith('.exe') or path.endswith('.com') or path.endswith('.bat')

PYTHON_BINARY = 'bazel_tools/tools/python/py3wrapper.sh'
if IsWindows() and not HasWindowsExecutableExtension(PYTHON_BINARY):
    # Windows installs python as .exe
    PYTHON_BINARY = "python.exe"

# Find a file in a given search path.
def SearchPath(name):
  search_path = os.getenv('PATH', os.defpath).split(os.pathsep)
  for directory in search_path:
    if directory == '': continue
    path = os.path.join(directory, name)
    if os.path.isfile(path) and os.access(path, os.X_OK):
      return path
  return None

def IsRunningFromZip():
  return False

# Find the real Python binary if it's not a normal absolute path
def FindPythonBinary(module_space):
  if sys.platform == "win32":
    return sys.executable
  if PYTHON_BINARY.startswith('//'):
    # Case 1: Path is a label. Not supported yet.
    raise AssertionError(
      'Bazel does not support execution of Python interpreters via labels yet')
  elif os.path.isabs(PYTHON_BINARY):
    # Case 2: Absolute path.
    return PYTHON_BINARY
  # Use normpath() to convert slashes to os.sep on Windows.
  elif os.sep in os.path.normpath(PYTHON_BINARY):
    # Case 3: Path is relative to the repo root.
    return os.path.join(module_space, PYTHON_BINARY)
  else:
    # Case 4: Path has to be looked up in the search path.
    return SearchPath(PYTHON_BINARY)

def CreatePythonPathEntries(python_imports, module_space):
  parts = python_imports.split(':');
  return [module_space] + ["%s/%s" % (module_space, path) for path in parts]

def FindModuleSpaceWindows():
  stub_filename = sys.argv[0]

  if not os.path.isabs(stub_filename):
    stub_filename = os.path.join(os.getcwd(), stub_filename)
  stub_dirname = os.path.dirname(stub_filename)
  while True:
    module_space = stub_filename + '.runfiles'
    if os.path.isdir(module_space):
      return module_space
    if os.path.dirname(stub_dirname) == stub_dirname:
      raise AssertionError('Cannot find src directory for %s' % sys.argv[0])
    if os.path.basename(stub_dirname) == "src" or ".runfiles" in os.path.basename(stub_dirname):
      return stub_dirname
    else:
      stub_dirname = os.path.dirname(stub_dirname)


# Find the runfiles tree
def FindModuleSpace():
  stub_filename = sys.argv[0]
  if not os.path.isabs(stub_filename):
    stub_filename = os.path.join(os.getcwd(), stub_filename)

  while True:
    # TODO(jamison): Re-append '.exe' if isWindows() after implementing a py_toolchain.
    module_space = stub_filename + '.runfiles'
    if os.path.isdir(module_space):
      return module_space

    runfiles_pattern = r'(.*\.runfiles)' + (r'\\' if IsWindows() else '/') + '.*'
    matchobj = re.match(runfiles_pattern, stub_filename)
    if matchobj:
      return matchobj.group(1)

    if not os.path.islink(stub_filename):
      break
    target = os.readlink(stub_filename)
    if os.path.isabs(target):
      stub_filename = target
    else:
      stub_filename = os.path.join(os.path.dirname(stub_filename), target)

  raise AssertionError('Cannot find .runfiles directory for %s' % sys.argv[0])

def ExtractZip(zip_path, dest_dir):
  """Extracts the contents of a zip file, preserving the unix file mode bits.

  These include the permission bits, and in particular, the executable bit.

  Ideally the zipfile module should set these bits, but it doesn't. See:
  https://bugs.python.org/issue15795.

  Args:
      zip_path: The path to the zip file to extract
      dest_dir: The path to the destination directory
  """
  zip_path = GetWindowsPathWithUNCPrefix(zip_path)
  dest_dir = GetWindowsPathWithUNCPrefix(dest_dir)
  with zipfile.ZipFile(zip_path) as zf:
    for info in zf.infolist():
      zf.extract(info, dest_dir)
      # UNC-prefixed paths must be absolute/normalized. See
      # https://docs.microsoft.com/en-us/windows/desktop/fileio/naming-a-file#maximum-path-length-limitation
      file_path = os.path.abspath(os.path.join(dest_dir, info.filename))
      # The Unix st_mode bits (see "man 7 inode") are stored in the upper 16
      # bits of external_attr. Of those, we set the lower 12 bits, which are the
      # file mode bits (since the file type bits can't be set by chmod anyway).
      attrs = info.external_attr >> 16
      if attrs != 0:  # Rumor has it these can be 0 for zips created on Windows.
        os.chmod(file_path, attrs & 0o7777)

# Create the runfiles tree by extracting the zip file
def CreateModuleSpace():
  temp_dir = tempfile.mkdtemp("", "Bazel.runfiles_")
  ExtractZip(os.path.dirname(__file__), temp_dir)
  return os.path.join(temp_dir, "runfiles")

PYTHON_WINDOWS_DIRNAME = "python_windows"
# Returns repository roots to add to the import path.
def GetRepositoriesImports(module_space, import_all):
  if import_all:
    rel_repo_dirnames = os.listdir(module_space)
    # Add directories that contain the standard Python library files
    if PYTHON_WINDOWS_DIRNAME in rel_repo_dirnames:
      rel_repo_dirnames.append(os.path.join(PYTHON_WINDOWS_DIRNAME, "DLLs"))
      rel_repo_dirnames.append(os.path.join(PYTHON_WINDOWS_DIRNAME, "Lib"))

    repo_dirs = [os.path.join(module_space, d) for d in rel_repo_dirnames]
    return [d for d in repo_dirs if os.path.isdir(d)]
  return [os.path.join(module_space, "applied")]

# Finds the runfiles manifest or the runfiles directory.
def RunfilesEnvvar(module_space):
  # If this binary is the data-dependency of another one, the other sets
  # RUNFILES_MANIFEST_FILE or RUNFILES_DIR for our sake.
  runfiles = os.environ.get('RUNFILES_MANIFEST_FILE', None)
  if runfiles:
    return ('RUNFILES_MANIFEST_FILE', runfiles)

  runfiles = os.environ.get('RUNFILES_DIR', None)
  if runfiles:
    return ('RUNFILES_DIR', runfiles)

  # If running from a zip, there's no manifest file.
  if IsRunningFromZip():
    return ('RUNFILES_DIR', module_space)

  # Look for the runfiles "output" manifest, argv[0] + ".runfiles_manifest"
  runfiles = module_space + '_manifest'
  if os.path.exists(runfiles):
    return ('RUNFILES_MANIFEST_FILE', runfiles)

  # Look for the runfiles "input" manifest, argv[0] + ".runfiles/MANIFEST"
  runfiles = os.path.join(module_space, 'MANIFEST')
  if os.path.exists(runfiles):
    return ('RUNFILES_DIR', runfiles)

  # If running in a sandbox and no environment variables are set, then
  # Look for the runfiles  next to the binary.
  if module_space.endswith('.runfiles') and os.path.isdir(module_space):
    return ('RUNFILES_DIR', module_space)

  return (None, None)


def Main():
  args = sys.argv[1:]

  new_env = {}

  if IsRunningFromZip():
    module_space = CreateModuleSpace()
  elif IsWindows():
    module_space = FindModuleSpaceWindows()
  else:
    module_space = FindModuleSpace()

  python_imports = ''
  python_path_entries = CreatePythonPathEntries(python_imports, module_space)
  python_path_entries += GetRepositoriesImports(module_space, True)

  if IsWindows():
    base_path = GetWindowsPathWithUNCPrefix("./")
    new_env['PYTHONPATH_PREFIX'] = base_path
    python_path_entries = [os.path.relpath(GetWindowsPathWithUNCPrefix(d), base_path) for d in python_path_entries]
    python_path_entries = list(set(python_path_entries))


  old_python_path = os.environ.get('PYTHONPATH')
  python_path = os.pathsep.join(python_path_entries)
  # Look at old_python_path and add paths it contains that are not part of our new
  # python path. Ideally, we should not be using old_python_path at all but because
  # a scattered group of our targets still pull dependencies transitively we needed to
  # make this adjustment.
  if old_python_path:
    for path in old_python_path.split(os.pathsep):
      if path not in python_path:
        python_path += os.pathsep + path

  if IsWindows():
    python_path = python_path.replace("/", os.sep)

  new_env['PYTHONPATH'] = python_path
  new_env['JOBLIB_MULTIPROCESSING'] = "0"
  runfiles_envkey, runfiles_envvalue = RunfilesEnvvar(module_space)
  if runfiles_envkey:
    new_env[runfiles_envkey] = runfiles_envvalue

  # Now look for my main python source file.
  # The magic string percent-main-percent is replaced with the filename of the
  # main file of the Python binary in BazelPythonSemantics.java.
  rel_path = 'cython_package/cython.py'
  if IsWindows():
    rel_path = rel_path.replace("/", os.sep)

  main_filename = os.path.join(module_space, rel_path)
  main_filename = GetWindowsPathWithUNCPrefix(main_filename)
  assert os.path.exists(main_filename), \
         'Cannot exec() %r: file not found.' % main_filename
  assert os.access(main_filename, os.R_OK), \
         'Cannot exec() %r: file not readable.' % main_filename

  program = python_program = FindPythonBinary(module_space)
  if python_program is None:
    raise AssertionError('Could not find python binary: ' + PYTHON_BINARY)

  # We cannot rely on sys.executable in cythonized code to get the path to the python executable.
  # So we instead store this path in an environment variable here so we can access the same python
  # that launched the stub in places where we need to invoke it again in the code (ex: services_launcher.py, manager_controller, etc.).
  new_env['PYTHON_EXE'] = sys.executable
  args = [python_program, '-S',  main_filename] + args

  os.environ.update(new_env)

  try:
    sys.stdout.flush()
    if IsRunningFromZip():
      # If RUN_UNDER_RUNFILES equals 1, it means we need to
      # change directory to the right runfiles directory.
      # (So that the data files are accessible)
      if os.environ.get("RUN_UNDER_RUNFILES") == "1":
        os.chdir(os.path.join(module_space, "applied"))
      ret_code = subprocess.call(args)
      shutil.rmtree(os.path.dirname(module_space), True)
      sys.exit(ret_code)
    else:
      # On Windows, os.execv doesn't handle arguments with spaces correctly,
      # and it actually starts a subprocess just like subprocess.call.
      #
      # If we may need to emit a host config warning after execution, don't
      # execv because we need control to return here. This only happens for
      # targets built in the host config, so other targets still get to take
      # advantage of the performance benefits of execv.
      if IsWindows():
        ret_code = subprocess.call(args)
        sys.exit(ret_code)
      else:
        os.execv(args[0], args)
  except EnvironmentError:
    # This works from Python 2.4 all the way to 3.x.
    e = sys.exc_info()[1]
    # This exception occurs when os.execv() fails for some reason.
    if not getattr(e, 'filename', None):
      e.filename = program  # Add info to error message
    raise

if __name__ == '__main__':
  Main()
